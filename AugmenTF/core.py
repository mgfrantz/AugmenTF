# AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_core.ipynb (unless otherwise specified).

__all__ = ['read_json', 'write_json', 'read_text', 'write_text', 'read_pickle', 'write_pickle', 'apply_chained_funcs']

# Cell
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import (layers, activations,
                              losses, callbacks,
                              models, metrics)
import json
import pickle
from pathlib import Path

# Cell
Path.ls = lambda x: list(x.iterdir())

# Cell
def read_json(path):
    '''
    Reads a JSON.

    Options:
    path: Path or str, json you want to read in.

    Returns:
    a dict of the contents of the JSON.
    '''
    with open(path, 'r') as j:
        return json.load(j)

def write_json(contents, path):
    '''
    Writes a python dict as a JSON to the path.

    Options:
    contents: a python dictionary you want to write as a JSON
    path: where you want to save the JSON. Must end in ".json"
    '''

    assert str(path).endswith('json')
    with open(path, 'w') as j:
        json.dump(contents, j)

# Cell
def read_text(path, as_lines=False):
    '''
    Returns the contents of a textfile as a string.

    Options:
    path: str or Path, text file you want to open.
    as_lines: if True, returns each line in a textfile as an item in a list of strings.

    Returns:
    str, or list of str.
    '''
    with open(path, 'r') as f:
        if as_lines:
            return [line.strip() for line in f.readlines()
                    if len(line.strip())]
        else:
            return f.read()

def write_text(text, path):
    '''
    Writes string contents as a .txt file.

    Options:
    path: str or Path, where to write the text file.
    '''
    with open(path, 'w') as f:
        f.write(text)

# Cell
def read_pickle(path):
    '''
    Reads a .pkl file

    Options:
    path: str or Path, pickle file you want to open.

    Returns:
    The unpickled Python object.
    '''

    with open(path, 'rb') as p:
        return pickle.load(p)

def write_pickle(obj, path):
    '''
    Writes a Python object as a Pickle file.

    Options:
    obj: Python object you want to pickle.
    path: str or Path of where you want the pickled object to be written.
    '''

    with open(path, 'wb') as p:
        pickle.dump(obj, p)

# Cell
def apply_chained_funcs(x, funcs):
    '''

    Options:
    x: Object you'd like to apply the functions to
    funcs: list, functions (ordered) you'd like to apply to obj.

    Returns:
    x processed by all the functions in funcs
    '''
    tmp = x
    for func in funcs:
        tmp = func(tmp)
    return tmp